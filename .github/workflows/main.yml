name: Workflow
on: [push]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install --upgrade pip && \
          pip install \
            Flask \
            flake8 \
            pylint  \
            pytest \
            pytest-flask

      - name: Lint the code V1
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Lint the code V2
        run: pylint --errors-only --disable=C0301 --disable=C0326 *.py

      - name: Run the unit test of the application
        run: python -m unittest --verbose --failfast
  build:  # Nom du job
    needs: [lint]  # Dépend du job `lint`
    runs-on: ubuntu-latest  # S'exécute sur la dernière version d'Ubuntu
    permissions:  # Permissions nécessaires
      packages: write  # Autorisation d'écrire aux packages

    # Étapes du job
    steps:
      - name: code checkout  # Récupère le code source
        uses: actions/checkout@v4  # Utilise l'action GitHub pour le checkout

      - name: setup Buildx  # Configure Docker Buildx
        uses: docker/setup-buildx-action@v3  # Utilise l'action Buildx

      - name: login to GitHub Package Registry  # Connexion à GitHub Container Registry
        uses: docker/login-action@v3  # Utilise l'action de login Docker
        with:  # Avec ces paramètres
          username: ${{ github.actor }}  # Nom d'utilisateur GitHub
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # `GITHUB_TOKEN` pour l'authentification

      - name: get metadata  # Récupère les métadonnées pour Docker
        id: metadata  # ID pour cette étape
        uses: docker/metadata-action@v5  # Utilise l'action de métadonnées
        with:
          images: ghcr.io/${{ github.repository }}/  # Utilise le nom dur repository
          
      - name: Get current date # get the date of the build
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      - name: build and push  # Construit et pousse l'image
        uses: docker/build-push-action@v5  # Utilise l'action de build et push Docker
        with:  # Avec ces paramètres
          push: true  # Pousse l'image
          tags: flask-docker:${{ steps.date.outputs.date }}  # Tags pour l'image
          context: .  # Contexte pour la construction Docker
          cache-from: type=gha  # Utilise le cache GitHub Actions
          cache-to: type=gha,mode=max  # Enregistre le cache pour les utilisations futures
